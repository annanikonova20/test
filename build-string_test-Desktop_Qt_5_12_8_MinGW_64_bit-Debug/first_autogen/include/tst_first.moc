/****************************************************************************
** Meta object code from reading C++ file 'tst_first.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.12.8)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_first.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.12.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_first_t {
    QByteArrayData data[37];
    char stringdata0[493];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_first_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_first_t qt_meta_stringdata_first = {
    {
QT_MOC_LITERAL(0, 0, 5), // "first"
QT_MOC_LITERAL(1, 6, 10), // "test_case1"
QT_MOC_LITERAL(2, 17, 0), // ""
QT_MOC_LITERAL(3, 18, 10), // "test_empty"
QT_MOC_LITERAL(4, 29, 13), // "test_notEmpty"
QT_MOC_LITERAL(5, 43, 10), // "test_clear"
QT_MOC_LITERAL(6, 54, 14), // "test_push_back"
QT_MOC_LITERAL(7, 69, 11), // "test_append"
QT_MOC_LITERAL(8, 81, 13), // "test_contains"
QT_MOC_LITERAL(9, 95, 12), // "test_compare"
QT_MOC_LITERAL(10, 108, 13), // "test_endsWith"
QT_MOC_LITERAL(11, 122, 18), // "test_findLastIndex"
QT_MOC_LITERAL(12, 141, 9), // "test_find"
QT_MOC_LITERAL(13, 151, 14), // "test_findIndex"
QT_MOC_LITERAL(14, 166, 11), // "test_length"
QT_MOC_LITERAL(15, 178, 12), // "test_length0"
QT_MOC_LITERAL(16, 191, 9), // "test_left"
QT_MOC_LITERAL(17, 201, 10), // "test_left1"
QT_MOC_LITERAL(18, 212, 8), // "test_mid"
QT_MOC_LITERAL(19, 221, 9), // "test_mid1"
QT_MOC_LITERAL(20, 231, 12), // "test_replace"
QT_MOC_LITERAL(21, 244, 19), // "test_AnotherReplace"
QT_MOC_LITERAL(22, 264, 17), // "test_replacedCopy"
QT_MOC_LITERAL(23, 282, 10), // "test_right"
QT_MOC_LITERAL(24, 293, 9), // "test_size"
QT_MOC_LITERAL(25, 303, 15), // "test_startsWith"
QT_MOC_LITERAL(26, 319, 11), // "test_substr"
QT_MOC_LITERAL(27, 331, 12), // "test_toLower"
QT_MOC_LITERAL(28, 344, 12), // "test_toUpper"
QT_MOC_LITERAL(29, 357, 12), // "test_trimmed"
QT_MOC_LITERAL(30, 370, 13), // "test_truncate"
QT_MOC_LITERAL(31, 384, 17), // "test_operatorPlus"
QT_MOC_LITERAL(32, 402, 24), // "test_AnotherOperatorPlus"
QT_MOC_LITERAL(33, 427, 17), // "test_operatorLess"
QT_MOC_LITERAL(34, 445, 18), // "test_operatorNotEq"
QT_MOC_LITERAL(35, 464, 18), // "test_operatorEqual"
QT_MOC_LITERAL(36, 483, 9) // "test_from"

    },
    "first\0test_case1\0\0test_empty\0test_notEmpty\0"
    "test_clear\0test_push_back\0test_append\0"
    "test_contains\0test_compare\0test_endsWith\0"
    "test_findLastIndex\0test_find\0"
    "test_findIndex\0test_length\0test_length0\0"
    "test_left\0test_left1\0test_mid\0test_mid1\0"
    "test_replace\0test_AnotherReplace\0"
    "test_replacedCopy\0test_right\0test_size\0"
    "test_startsWith\0test_substr\0test_toLower\0"
    "test_toUpper\0test_trimmed\0test_truncate\0"
    "test_operatorPlus\0test_AnotherOperatorPlus\0"
    "test_operatorLess\0test_operatorNotEq\0"
    "test_operatorEqual\0test_from"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_first[] = {

 // content:
       8,       // revision
       0,       // classname
       0,    0, // classinfo
      35,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  189,    2, 0x08 /* Private */,
       3,    0,  190,    2, 0x08 /* Private */,
       4,    0,  191,    2, 0x08 /* Private */,
       5,    0,  192,    2, 0x08 /* Private */,
       6,    0,  193,    2, 0x08 /* Private */,
       7,    0,  194,    2, 0x08 /* Private */,
       8,    0,  195,    2, 0x08 /* Private */,
       9,    0,  196,    2, 0x08 /* Private */,
      10,    0,  197,    2, 0x08 /* Private */,
      11,    0,  198,    2, 0x08 /* Private */,
      12,    0,  199,    2, 0x08 /* Private */,
      13,    0,  200,    2, 0x08 /* Private */,
      14,    0,  201,    2, 0x08 /* Private */,
      15,    0,  202,    2, 0x08 /* Private */,
      16,    0,  203,    2, 0x08 /* Private */,
      17,    0,  204,    2, 0x08 /* Private */,
      18,    0,  205,    2, 0x08 /* Private */,
      19,    0,  206,    2, 0x08 /* Private */,
      20,    0,  207,    2, 0x08 /* Private */,
      21,    0,  208,    2, 0x08 /* Private */,
      22,    0,  209,    2, 0x08 /* Private */,
      23,    0,  210,    2, 0x08 /* Private */,
      24,    0,  211,    2, 0x08 /* Private */,
      25,    0,  212,    2, 0x08 /* Private */,
      26,    0,  213,    2, 0x08 /* Private */,
      27,    0,  214,    2, 0x08 /* Private */,
      28,    0,  215,    2, 0x08 /* Private */,
      29,    0,  216,    2, 0x08 /* Private */,
      30,    0,  217,    2, 0x08 /* Private */,
      31,    0,  218,    2, 0x08 /* Private */,
      32,    0,  219,    2, 0x08 /* Private */,
      33,    0,  220,    2, 0x08 /* Private */,
      34,    0,  221,    2, 0x08 /* Private */,
      35,    0,  222,    2, 0x08 /* Private */,
      36,    0,  223,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void first::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        auto *_t = static_cast<first *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->test_case1(); break;
        case 1: _t->test_empty(); break;
        case 2: _t->test_notEmpty(); break;
        case 3: _t->test_clear(); break;
        case 4: _t->test_push_back(); break;
        case 5: _t->test_append(); break;
        case 6: _t->test_contains(); break;
        case 7: _t->test_compare(); break;
        case 8: _t->test_endsWith(); break;
        case 9: _t->test_findLastIndex(); break;
        case 10: _t->test_find(); break;
        case 11: _t->test_findIndex(); break;
        case 12: _t->test_length(); break;
        case 13: _t->test_length0(); break;
        case 14: _t->test_left(); break;
        case 15: _t->test_left1(); break;
        case 16: _t->test_mid(); break;
        case 17: _t->test_mid1(); break;
        case 18: _t->test_replace(); break;
        case 19: _t->test_AnotherReplace(); break;
        case 20: _t->test_replacedCopy(); break;
        case 21: _t->test_right(); break;
        case 22: _t->test_size(); break;
        case 23: _t->test_startsWith(); break;
        case 24: _t->test_substr(); break;
        case 25: _t->test_toLower(); break;
        case 26: _t->test_toUpper(); break;
        case 27: _t->test_trimmed(); break;
        case 28: _t->test_truncate(); break;
        case 29: _t->test_operatorPlus(); break;
        case 30: _t->test_AnotherOperatorPlus(); break;
        case 31: _t->test_operatorLess(); break;
        case 32: _t->test_operatorNotEq(); break;
        case 33: _t->test_operatorEqual(); break;
        case 34: _t->test_from(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

QT_INIT_METAOBJECT const QMetaObject first::staticMetaObject = { {
    &QObject::staticMetaObject,
    qt_meta_stringdata_first.data,
    qt_meta_data_first,
    qt_static_metacall,
    nullptr,
    nullptr
} };


const QMetaObject *first::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *first::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_first.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int first::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 35)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 35;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 35)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 35;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
